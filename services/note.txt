package services

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/sts"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	cognito "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	"github.com/aws/aws-sdk-go/service/iot"
)

//var ctx = context.TODO()

type CogClient struct {
	AppClientId string
	UserPoolId  string
	ClientCog   *cognito.CognitoIdentityProvider
	Sess        *string
	Iots        *iot.IoT
}

func NewThingClient(cognitoRegion string, userPoolId string, cognitoClientId string) ThinksService {

	awsAccessKeyID := "AKIAXPA5O4YTL6NM4LKC"
	awsSecretAccessKey := "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"

	sess, err := session.NewSession(&aws.Config{
		Region:      aws.String(cognitoRegion),
		Credentials: credentials.NewStaticCredentials(awsAccessKeyID, awsSecretAccessKey, ""),
	})

	if err != nil {
		fmt.Println("Failed to create session:", err)

	}

	return &CogClient{
		AppClientId: cognitoClientId,
		UserPoolId:  userPoolId,
		ClientCog:   cognito.New(sess),
		Iots:        iot.New(sess),
	}

}

func (s *CogClient) GetCerds() (interface{}, error) {
	thingName := "23F05110000126"

	resp, err := s.Iots.ListThingPrincipals(&iot.ListThingPrincipalsInput{
		ThingName: aws.String(thingName),
	})

	if err != nil {
		panic(err)
	}

	pincipal := resp.Principals

	fmt.Println(pincipal)

	certificateId := extractCertificateId(*resp.Principals[0])

	//authenticateCognito(s.ClientCog)
	// res := &s.UserPoolId

	return certificateId, nil
}

func authenticateCognito(client *cognito.CognitoIdentityProvider) {
	// TODO: Implement Cognito authentication logic here

	// poolID := "ap-southeast-1_EqxkPGgmk"
	clientID := "qq74q62sm1jfg8t7qetmo3a86"
	username := "tidosi6511@vaband.com"
	password := "Pass@word2020"

	authInput := &cognito.InitiateAuthInput{
		AuthFlow: aws.String("USER_PASSWORD_AUTH"),
		ClientId: aws.String(clientID),
		AuthParameters: map[string]*string{
			"USERNAME": aws.String(username),
			"PASSWORD": aws.String(password),
		},
	}

	authOutput, err := client.InitiateAuth(authInput)
	if err != nil {
		panic(err)
	}

	// Retrieve the Cognito session tokens
	idToken := authOutput.AuthenticationResult.IdToken
	accessToken := authOutput.AuthenticationResult.AccessToken

	fmt.Println("idToken")
	fmt.Println(idToken)
	fmt.Println("AccessToken")
	fmt.Println(accessToken)

}

func extractCertificateId(principalArn string) string {
	arnParts := strings.Split(principalArn, "/")
	return arnParts[len(arnParts)-1]
}

func getCredential() {
	cfg, err := config.LoadDefaultConfig(context.TODO())
	if err != nil {
		log.Fatalln("Failed to load AWS config:", err)
	}

	// Create a Cognito Identity Provider client
	cognitoIdentityProviderClient := cognitoidentityprovider.NewFromConfig(cfg)

	// Specify the Cognito user pool ID, username, and password
	userPoolID := "YOUR_USER_POOL_ID"
	username := "YOUR_USERNAME"
	password := "YOUR_PASSWORD"

	// Authenticate the user and retrieve the Cognito ID token
	authResult, err := cognitoIdentityProviderClient.InitiateAuth(context.TODO(), &cognitoidentityprovider.InitiateAuthInput{
		AuthFlow: cognitoidentityprovider.AuthFlowTypeUserPasswordAuth,
		AuthParameters: map[string]string{
			"USERNAME": username,
			"PASSWORD": password,
		},
		ClientId:   "YOUR_CLIENT_ID",
		UserPoolId: userPoolID,
	})
	if err != nil {
		log.Fatalln("Failed to authenticate user:", err)
	}

	// Create a Cognito Identity client
	cognitoIdentityClient := cognitoidentity.NewFromConfig(cfg)

	// Get the Cognito identity ID using the Cognito ID token
	getIdentityResult, err := cognitoIdentityClient.GetId(context.TODO(), &cognitoidentity.GetIdInput{
		IdentityPoolId: "YOUR_IDENTITY_POOL_ID",
		Logins: map[string]string{
			"cognito-idp.<YOUR_AWS_REGION>.amazonaws.com/<YOUR_USER_POOL_ID>": *authResult.AuthenticationResult.IdToken,
		},
	})
	if err != nil {
		log.Fatalln("Failed to get Cognito identity ID:", err)
	}

	// Create a Security Token Service (STS) client
	stsClient := sts.NewFromConfig(cfg)

	// Assume an IAM role with the Cognito identity as the role's principal
	assumeRoleResult, err := stsClient.AssumeRoleWithWebIdentity(context.TODO(), &sts.AssumeRoleWithWebIdentityInput{
		RoleArn:          "YOUR_ROLE_ARN",
		RoleSessionName:  "session",
		WebIdentityToken: authResult.AuthenticationResult.IdToken,
	})
	if err != nil {
		log.Fatalln("Failed to assume role with web identity:", err)
	}

	// Set the temporary credentials in the AWS config
	cfg.Credentials = aws.NewCredentialsCache(assumeRoleResult.Credentials)

	// Create an IoT client using the temporary credentials
	iotClient := iot.NewFromConfig(cfg)

	// Specify the Thing name and Thing policy name or ARN
	thingName := "YOUR_THING_NAME"
	thingPolicyNameOrArn := "YOUR_THING_POLICY_NAME_OR_ARN"

	// Attach the Thing policy to the Thing
	// _, err = iotClient.AttachPolicy(context.TODO(), &iot.AttachPolicyInput{
	// 	PolicyName: &})

}
